{"version":3,"sources":["../src/index.ts","../src/fetch/index.ts","../src/constants.ts","../src/ws/handler/baseHandler.ts","../src/ws/handler/ping.ts","../src/ws/handler/handler.ts","../src/ws/ws.ts"],"sourcesContent":["export { get, post, del, put, mutate } from \"./fetch\";\n\nexport { __ORDERLY_API_URL_KEY__ } from \"./constants\";\n\nexport { WS } from \"./ws/ws\";\n","async function request(url: string, options: RequestInit) {\n  // console.log(\"request\", url, options);\n  if (!url.startsWith(\"http\")) {\n    throw new Error(\"url must start with http(s)\");\n  }\n  const urlInstance = new URL(url);\n  const response = await fetch(urlInstance, {\n    ...options,\n    // mode: \"cors\",\n    // credentials: \"include\",\n    headers: _createHeaders(options.headers, options.method),\n  });\n\n  if (response.ok) {\n    const res = await response.json();\n    if (res.success) {\n      return res;\n    } else {\n      throw new Error(res);\n    }\n  }\n\n  const error = await response.json();\n\n  throw new Error(error.message || error.code || error);\n}\n\nfunction _createHeaders(\n  headers: HeadersInit = {},\n  method?: string\n): HeadersInit {\n  // console.log(\"headers\", headers);\n  const _headers = new Headers(headers);\n  // _headers.append(\"Accept\", \"application/json\");\n\n  if (!_headers.has(\"Content-Type\")) {\n    if (method !== \"DELETE\") {\n      _headers.append(\"Content-Type\", \"application/json;charset=utf-8\");\n    } else {\n      _headers.append(\"Content-Type\", \"application/x-www-form-urlencoded\");\n    }\n  }\n\n  return _headers;\n}\n\nasync function get<R>(\n  url: string,\n  options?: RequestInit,\n  formatter?: (data: any) => R\n): Promise<R> {\n  const res = await request(url, {\n    method: \"GET\",\n    ...options,\n  });\n\n  if (res.success) {\n    if (typeof formatter === \"function\") {\n      return formatter(res.data);\n    }\n    // 根据返回的数据结构，返回需要的数据\n    if (Array.isArray(res.data[\"rows\"])) {\n      return res.data[\"rows\"] as R;\n    }\n    return res.data;\n  }\n  throw new Error(res.message);\n}\nasync function post(\n  url: string,\n  data: any,\n  options?: Omit<RequestInit, \"method\">\n): Promise<any> {\n  const res = await request(url, {\n    method: \"POST\",\n    body: JSON.stringify(data),\n    ...options,\n  });\n\n  return res;\n}\n\nasync function put(\n  url: string,\n  data: any,\n  options?: Omit<RequestInit, \"method\">\n): Promise<any> {\n  const res = await request(url, {\n    method: \"PUT\",\n    body: JSON.stringify(data),\n    ...options,\n  });\n\n  return res;\n}\n\nasync function del(\n  url: string,\n  options?: Omit<RequestInit, \"method\">\n): Promise<any> {\n  const res = await request(url, {\n    method: \"DELETE\",\n    ...options,\n  });\n\n  return res;\n}\n\nasync function mutate(url: string, init: RequestInit) {\n  const res = await request(url, init);\n\n  return res;\n}\n\nexport { get, post, del, put, mutate };\n","export const __ORDERLY_API_URL_KEY__: string = \"__ORDERLY_API_URL__\";\n","import { MessageHandler } from \"@/types/ws\";\n\nexport default class BaseHandler implements MessageHandler {\n  handle(message: any, webSocket: WebSocket) {\n    throw new Error(\"Method not implemented.\");\n  }\n}\n","import BaseHandler from \"./baseHandler\";\n\nexport default class PingHandler extends BaseHandler {\n  handle(_: any, webSocket: WebSocket) {\n    webSocket.send(JSON.stringify({ event: \"pong\", ts: Date.now() }));\n  }\n}\n","import { MessageHandler } from \"@/types/ws\";\nimport PingHandler from \"./ping\";\n\nexport type MessageType =\n  | \"ping\"\n  | \"pong\"\n  | \"subscribe\"\n  | \"unsubscribe\"\n  | \"authenticate\"\n  | \"message\"\n  | \"error\"\n  | \"auth\"\n  | \"close\";\n\nexport const messageHandlers = new Map<MessageType, MessageHandler>([\n  [\"ping\", new PingHandler()],\n]);\n","import { messageHandlers } from \"./handler/handler\";\n\nexport type NetworkId = \"testnet\" | \"mainnet\";\n\nexport type WSOptions = {\n  privateUrl: string;\n  publicUrl: string;\n  networkId?: NetworkId;\n  accountId?: string;\n\n  onSigntureRequest?: (accountId: string) => Promise<any>;\n};\n\nexport type unsubscribe = () => void;\n\nexport type MessageParams = {\n  event: string;\n  topic: string;\n\n  params?: any;\n  // [key: string]: any;\n};\n\ntype WSMessageHandler = {\n  onMessage: (message: any) => void;\n  onError?: (error: any) => void;\n  onClose?: (event: any) => void;\n  onUnsubscribe: (event: any) => any;\n  formatter?: (message: any) => any;\n};\n\ntype Topics = {\n  params: MessageParams;\n  isPrivate?: boolean;\n  callback: WSMessageHandler[];\n};\n\nconst defaultMessageFormatter = (message: any) => message.data;\nconst COMMON_ID = \"OqdphuyCtYWxwzhxyLLjOWNdFP7sQt8RPWzmb5xY\";\n\nexport class WS {\n  private publicSocket!: WebSocket;\n  private privateSocket?: WebSocket;\n\n  private publicIsReconnecting: boolean = false;\n  private privateIsReconnecting: boolean = false;\n\n  private reconnectInterval: number = 1000;\n\n  private authenticated: boolean = false;\n\n  private _pendingPrivateSubscribe: any[][] = [];\n  private _pendingPublicSubscribe: any[][] = [];\n\n  // all message handlers\n  private _eventHandlers: Map<string, Topics> = new Map();\n  private _eventPrivateHandlers: Map<string, Topics> = new Map();\n\n  constructor(private options: WSOptions) {\n    this.createPublicSC(options);\n\n    if (!!options.accountId) {\n      this.createPrivateSC(options);\n    }\n  }\n\n  public openPrivate(accountId: string) {\n    if (this.privateSocket?.readyState === WebSocket.OPEN) {\n      return;\n    }\n    this.createPrivateSC({\n      ...this.options,\n      accountId,\n    });\n  }\n\n  public closePrivate() {\n    this.authenticated = false;\n    this._pendingPrivateSubscribe = [];\n\n    this._eventPrivateHandlers.clear();\n\n    this.privateSocket?.close();\n  }\n\n  private createPublicSC(options: WSOptions) {\n    this.publicSocket = new WebSocket(\n      `${this.options.publicUrl}/ws/stream/${COMMON_ID}`\n    );\n    this.publicSocket.onopen = this.onOpen.bind(this);\n    this.publicSocket.onmessage = this.onPublicMessage.bind(this);\n    this.publicSocket.onclose = this.onClose.bind(this);\n    this.publicSocket.onerror = this.onError.bind(this);\n  }\n\n  private createPrivateSC(options: WSOptions) {\n    console.log(\"to open private webSocket ---->>>>\");\n\n    this.options = options;\n\n    this.privateSocket = new WebSocket(\n      `${this.options.privateUrl}/v2/ws/private/stream/${options.accountId}`\n    );\n    this.privateSocket.onopen = this.onPrivateOpen.bind(this);\n    this.privateSocket.onmessage = this.onPrivateMessage.bind(this);\n    // this.privateSocket.onclose = this.onClose.bind(this);\n    this.privateSocket.onerror = this.onPrivateError.bind(this);\n  }\n\n  private onOpen(event: Event) {\n    console.log(\"WebSocket connection opened:\");\n    console.log(this._pendingPublicSubscribe);\n    if (this._pendingPublicSubscribe.length > 0) {\n      this._pendingPublicSubscribe.forEach(([params, cb]) => {\n        this.subscribe(params, cb);\n      });\n      this._pendingPublicSubscribe = [];\n    }\n\n    this.publicIsReconnecting = false;\n  }\n\n  private onPrivateOpen(event: Event) {\n    console.log(\"Private WebSocket connection opened:\");\n    //auth\n    this.authenticate(this.options.accountId!);\n    this.privateIsReconnecting = false;\n  }\n\n  private onMessage(\n    event: MessageEvent,\n    socket: WebSocket,\n    handlerMap: Map<string, Topics>\n  ) {\n    try {\n      const message = JSON.parse(event.data);\n      const commoneHandler = messageHandlers.get(message.event);\n\n      if (message.event === \"auth\" && message.success) {\n        this.authenticated = true;\n        this.handlePendingPrivateTopic();\n        return;\n      }\n\n      if (commoneHandler) {\n        commoneHandler.handle(message, socket);\n      } else {\n        const eventhandler = handlerMap.get(message.topic || message.event);\n        if (eventhandler?.callback) {\n          eventhandler.callback.forEach((cb) => {\n            const data = cb.formatter\n              ? cb.formatter(message)\n              : defaultMessageFormatter(message);\n\n            if (data) {\n              cb.onMessage(data);\n            }\n          });\n        }\n      }\n      // console.log(\"WebSocket message received:\", message);\n    } catch (e) {\n      console.log(\"WebSocket message received:\", e, event.data);\n    }\n\n    // You can process the received message here\n  }\n\n  private onPublicMessage(event: MessageEvent) {\n    this.onMessage(event, this.publicSocket, this._eventHandlers);\n  }\n\n  private onPrivateMessage(event: MessageEvent) {\n    this.onMessage(event, this.privateSocket!, this._eventPrivateHandlers);\n  }\n\n  private handlePendingPrivateTopic() {\n    if (this._pendingPrivateSubscribe.length > 0) {\n      this._pendingPrivateSubscribe.forEach(([params, cb]) => {\n        this.privateSubscribe(params, cb);\n      });\n      this._pendingPrivateSubscribe = [];\n    }\n  }\n\n  private onClose(event: CloseEvent) {\n    console.log(\"WebSocket connection closed:\", event.reason);\n  }\n\n  private onError(event: Event) {\n    console.error(\"WebSocket error:\", event);\n\n    this._eventHandlers.forEach((value, key) => {\n      if (!value.isPrivate) {\n        this._pendingPublicSubscribe.push([value.params, value.callback]);\n        this._eventHandlers.delete(key);\n      }\n    });\n\n    this.reconnectPublic();\n  }\n\n  private onPrivateError(event: Event) {\n    console.error(\"Private WebSocket error:\", event);\n\n    this._eventHandlers.forEach((value, key) => {\n      if (value.isPrivate) {\n        this._pendingPrivateSubscribe.push([value.params, value.callback]);\n        this._eventHandlers.delete(key);\n      }\n    });\n  }\n\n  send = (message: any) => {\n    if (typeof message !== \"string\") {\n      message = JSON.stringify(message);\n    }\n    if (typeof message === \"undefined\") return;\n    if (this.publicSocket.readyState === WebSocket.OPEN) {\n      this.publicSocket.send(message);\n      // console.log(\"WebSocket message sent:\", message);\n    } else {\n      console.warn(\"WebSocket connection is not open. Cannot send message.\");\n    }\n  };\n\n  close() {\n    this.publicSocket.close();\n    this.privateSocket?.close();\n  }\n\n  set accountId(accountId: string) {}\n\n  private async authenticate(accountId: string) {\n    if (this.authenticated) return;\n    if (!this.privateSocket) {\n      console.error(\"private ws not connected\");\n      return;\n    }\n\n    const message = await this.options.onSigntureRequest?.(accountId);\n\n    this.privateSocket.send(\n      JSON.stringify({\n        id: \"auth\",\n        event: \"auth\",\n        params: {\n          orderly_key: message.publicKey,\n          sign: message.signature,\n          timestamp: message.timestamp,\n        },\n      })\n    );\n    // this.wsSubject.next({ type: \"authenticate\" });\n    // this.authenticated = true;\n  }\n\n  privateSubscribe(\n    params: any,\n    callback: WSMessageHandler | Omit<WSMessageHandler, \"onUnsubscribe\">\n  ) {\n    const [subscribeMessage, onUnsubscribe] = this.generateMessage(\n      params,\n      (callback as WSMessageHandler).onUnsubscribe\n    );\n\n    if (this.privateSocket?.readyState !== WebSocket.OPEN) {\n      this._pendingPrivateSubscribe.push([params, callback]);\n      return () => {\n        this.unsubscribePrivate(subscribeMessage);\n      };\n    }\n\n    const topic = subscribeMessage.topic || subscribeMessage.event;\n\n    const handler = this._eventPrivateHandlers.get(topic);\n    const callbacks = {\n      ...callback,\n      onUnsubscribe,\n    };\n\n    if (!handler) {\n      this._eventPrivateHandlers.set(topic, {\n        params,\n        callback: [callbacks],\n      });\n    } else {\n      handler.callback.push(callbacks);\n    }\n\n    this.privateSocket.send(JSON.stringify(subscribeMessage));\n\n    return () => {\n      this.unsubscribePrivate(subscribeMessage);\n    };\n  }\n\n  subscribe(\n    params: any,\n    callback: WSMessageHandler | Omit<WSMessageHandler, \"onUnsubscribe\">,\n    once?: boolean\n  ): unsubscribe | undefined {\n    console.log(\"👉\", params, callback, this.publicSocket.readyState);\n\n    const [subscribeMessage, onUnsubscribe] = this.generateMessage(\n      params,\n      (callback as WSMessageHandler).onUnsubscribe\n    );\n\n    if (this.publicSocket.readyState !== WebSocket.OPEN) {\n      this._pendingPublicSubscribe.push([params, callback]);\n\n      if (!once) {\n        return () => {\n          this.unsubscribePublic(subscribeMessage);\n        };\n      }\n      return;\n    }\n\n    const topic = subscribeMessage.topic || subscribeMessage.event;\n\n    const handler = this._eventHandlers.get(topic);\n    const callbacks = {\n      ...callback,\n      onUnsubscribe,\n    };\n\n    if (!handler) {\n      this._eventHandlers.set(topic, {\n        params,\n        callback: [callbacks],\n      });\n    } else {\n      handler.callback.push(callbacks);\n    }\n\n    this.publicSocket.send(JSON.stringify(subscribeMessage));\n    // this._subscriptionPublicTopics.push({params, cb: [cb]});\n\n    if (!once) {\n      return () => {\n        this.unsubscribePublic(subscribeMessage);\n      };\n    }\n  }\n\n  // sendPublicMessage(){\n  //   if(this.publicSocket.readyState !== )\n  // }\n\n  onceSubscribe(\n    params: any,\n    callback: Omit<WSMessageHandler, \"onUnsubscribe\">\n  ) {\n    this.subscribe(params, callback, true);\n  }\n\n  private unsubscribe(\n    parmas: MessageParams,\n    webSocket: WebSocket,\n    handlerMap: Map<string, Topics>\n  ) {\n    const topic = parmas.topic || parmas.event;\n    const handler = handlerMap.get(topic);\n    console.log(\"🤜 unsubscribe\", parmas, topic, handler);\n\n    if (!!handler && Array.isArray(handler?.callback)) {\n      if (handler!.callback.length === 1) {\n        const unsubscribeMessage = handler!.callback[0].onUnsubscribe(topic);\n\n        console.log(\"unsubscribeMessage\", unsubscribeMessage);\n        webSocket.send(JSON.stringify(unsubscribeMessage));\n        handlerMap.delete(topic);\n        //post unsubscribe message\n      } else {\n        handlerMap.set(topic, {\n          ...handler,\n          callback: handler.callback.slice(0, -1),\n        });\n      }\n    }\n  }\n\n  private unsubscribePrivate(parmas: MessageParams) {\n    this.unsubscribe(parmas, this.privateSocket!, this._eventPrivateHandlers);\n  }\n\n  private unsubscribePublic(parmas: MessageParams) {\n    this.unsubscribe(parmas, this.publicSocket, this._eventHandlers);\n  }\n\n  private generateMessage(\n    params: any,\n    onUnsubscribe?: (event: string) => any\n  ): [MessageParams, (event: string) => any] {\n    let subscribeMessage;\n\n    if (typeof params === \"string\") {\n      subscribeMessage = { event: \"subscribe\", topic: params };\n    } else {\n      subscribeMessage = params;\n    }\n\n    if (typeof onUnsubscribe !== \"function\") {\n      if (typeof params === \"string\") {\n        console.log(\"👉\", params);\n\n        onUnsubscribe = () => ({ event: \"unsubscribe\", topic: params });\n      } else {\n        onUnsubscribe = () => ({ event: \"unsubscribe\", topic: params.topic });\n      }\n    }\n\n    return [subscribeMessage, onUnsubscribe];\n  }\n\n  private reconnectPublic() {\n    if (this.publicIsReconnecting) return;\n    this.publicIsReconnecting = true;\n    console.log(`Reconnecting in ${this.reconnectInterval / 1000} seconds...`);\n    window.setTimeout(() => {\n      console.log(\"Reconnecting...\");\n      // this.publicIsReconnecting = false;\n\n      this.createPublicSC(this.options);\n    }, this.reconnectInterval);\n  }\n}\n"],"mappings":"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","names":[]}
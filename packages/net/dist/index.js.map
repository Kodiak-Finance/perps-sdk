{"version":3,"sources":["../src/index.ts","../src/fetch/index.ts","../src/ws/index.ts","../src/ws/contants.ts","../src/ws/handler/baseHandler.ts","../src/ws/handler/ping.ts","../src/ws/handler/handler.ts","../src/constants.ts"],"sourcesContent":["export { get, post } from \"./fetch\";\n\nexport { default as WS } from \"./ws\";\nexport { __ORDERLY_API_URL_KEY__ } from \"./constants\";\n","async function request(url: string, options: RequestInit) {\n  if (!url.startsWith(\"http\")) {\n    throw new Error(\"url must start with http(s)\");\n  }\n  const urlInstance = new URL(url);\n  const response = await fetch(urlInstance, {\n    ...options,\n    // mode: \"cors\",\n    // credentials: \"include\",\n    headers: _createHeaders(options.headers),\n  }).catch((err) => {\n    console.log(\"fetch error\", err);\n    throw new Error(err);\n  });\n\n  if (response.ok) {\n    return response.json();\n  }\n  throw new Error(response.statusText);\n}\n\nfunction _createHeaders(headers: HeadersInit = {}): HeadersInit {\n  const _headers = new Headers(headers);\n  // _headers.append(\"Accept\", \"application/json\");\n\n  if (!_headers.has(\"Content-Type\")) {\n    _headers.append(\"Content-Type\", \"application/json;charset=utf-8\");\n  }\n\n  return _headers;\n}\n\nasync function get<R>(\n  url: string,\n  options?: RequestInit,\n  getter?: (data: any) => R\n): Promise<R> {\n  const res = await request(url, {\n    method: \"GET\",\n    ...options,\n  });\n\n  if (res.success) {\n    if (typeof getter === \"function\") {\n      return getter(res.data);\n    }\n    // 根据返回的数据结构，返回需要的数据\n    if (Array.isArray(res.data[\"rows\"])) {\n      return res.data[\"rows\"] as R;\n    }\n    return res.data;\n  }\n  throw new Error(res.message);\n}\nasync function post(\n  url: string,\n  data: any,\n  options?: Omit<RequestInit, \"method\">\n): Promise<any> {\n  return request(url, {\n    method: \"POST\",\n    body: JSON.stringify(data),\n    ...options,\n  });\n}\n\nexport { get, post };\n","import { type WebSocketSubject, webSocket } from \"rxjs/webSocket\";\n\nimport { WS_URL } from \"./contants\";\nimport { Observable, Observer, Subject, tap } from \"rxjs\";\nimport { messageHandlers } from \"@/ws/handler/handler\";\n\nexport type NetworkId = \"testnet\" | \"mainnet\";\n\nexport type WSOptions = {\n  url?: string;\n  networkId?: NetworkId;\n  accountId?: string;\n};\n\nclass WS {\n  // the topic reference count;\n  private static __topicRefCountMap: Map<string, number> = new Map();\n  private wsSubject: WebSocketSubject<any>;\n\n  private authenticated: boolean = false;\n\n  constructor(options: WSOptions) {\n    this.wsSubject = this.createSubject(options);\n\n    this.bindSubscribe();\n  }\n  private createSubject(options: WSOptions): WebSocketSubject<any> {\n    let url;\n    if (typeof options.url === \"string\") {\n      url = options.url;\n    } else {\n      url = WS_URL[options.networkId || \"testnet\"].public;\n    }\n\n    return webSocket({\n      url,\n      openObserver: {\n        next: () => {\n          console.log(\"Connection ok\");\n        },\n      },\n      closeObserver: {\n        next: () => {\n          console.log(\"Connection closed\");\n        },\n      },\n    });\n  }\n\n  private bindSubscribe() {\n    /// 处理ping,auth等消息\n    const send = this.send.bind(this);\n    this.wsSubject.subscribe({\n      next(message) {\n        const handler = messageHandlers.get(message.event);\n        if (handler) {\n          handler.handle(message, send);\n        }\n      },\n      error(err) {\n        console.log(\"WS Error: \", err);\n      },\n      complete() {\n        console.log(\"WS Connection closed\");\n      },\n    });\n  }\n\n  private authenticate() {\n    if (this.authenticated) return;\n    this.wsSubject.next({ type: \"authenticate\" });\n    this.authenticated = true;\n  }\n\n  send(message: any) {\n    this.wsSubject.next(message);\n  }\n\n  observe<T>(topic: string): Observable<T>;\n  observe<T>(topic: string, unsubscribe?: () => any): Observable<T>;\n  observe<T>(\n    params: {\n      event: string;\n    } & Record<string, any>,\n    unsubscribe?: () => any\n  ): Observable<T>;\n  observe<T>(\n    params: any,\n    unsubscribe?: () => any,\n    messageFilter?: (value: T) => boolean\n  ): Observable<T> {\n    const [subscribeMessage, unsubscribeMessage, filter, messageFormatter] =\n      this.generateMessage(params, unsubscribe, messageFilter);\n\n    return new Observable((observer: Observer<T>) => {\n      try {\n        //TODO: add ref count, only send subscribe message when ref count is 0\n        // 如果已经订阅过了，就不再发送订阅消息\n        const refCount = WS.__topicRefCountMap.get(subscribeMessage.topic) || 0;\n        if (refCount === 0) {\n          // WS.__topicRefCountMap.set(subscribeMessage.topic, WS.__topicRefCountMap.get(subscribeMessage.topic) + 1);\n          this.send(subscribeMessage);\n          WS.__topicRefCountMap.set(subscribeMessage.topic, refCount + 1);\n        }\n      } catch (err) {\n        observer.error(err);\n      }\n\n      const subscription = this.wsSubject.subscribe({\n        next: (x) => {\n          try {\n            if (filter(x)) {\n              observer.next(messageFormatter(x));\n            }\n          } catch (err) {\n            observer.error(err);\n          }\n        },\n        error: (err) => observer.error(err),\n        complete: () => observer.complete(),\n      });\n\n      return () => {\n        try {\n          // console.log(\"******* unsubscribe\", unsubscribeMessage);\n          const refCount =\n            WS.__topicRefCountMap.get(subscribeMessage.topic) || 0;\n          if (refCount > 1) {\n            WS.__topicRefCountMap.set(subscribeMessage.topic, refCount - 1);\n            return;\n          }\n          if (!!unsubscribeMessage) {\n            this.send(unsubscribeMessage);\n          }\n          WS.__topicRefCountMap.delete(subscribeMessage.topic);\n        } catch (err) {\n          observer.error(err);\n        }\n        subscription.unsubscribe();\n      };\n    });\n  }\n\n  privateObserve(topic: string): Observable<any> {\n    return this.observe(topic);\n  }\n\n  private generateMessage(\n    params: any,\n    unsubscribe?: () => any,\n    messageFilter?: (value: any) => boolean\n  ): [\n    Record<string, any>,\n    Record<string, any>,\n    (message: any) => boolean,\n    (message: any) => any\n  ] {\n    let subscribeMessage: Record<string, any>,\n      unsubscribeMessage: Record<string, any>;\n    let filter: (message: any) => boolean,\n      messageFormatter: (message: any) => any = (message: any) => message.data;\n\n    if (typeof params === \"string\") {\n      subscribeMessage = { event: \"subscribe\", topic: params };\n      unsubscribeMessage = { event: \"unsubscribe\", topic: params };\n      filter = (message: any) => message.topic === params;\n    } else {\n      subscribeMessage = params;\n      unsubscribeMessage =\n        typeof unsubscribe === \"function\" ? unsubscribe() : unsubscribe;\n      filter = messageFilter || ((message: any) => true);\n    }\n\n    return [subscribeMessage, unsubscribeMessage, filter, messageFormatter];\n  }\n}\n\nexport default WS;\n","export const WS_URL = {\n  testnet: {\n    public: \"wss://testnet-ws.orderly.org/ws/stream/\",\n    private: \"wss://testnet-ws-private.orderly.org/v2/ws/private/stream/\",\n  },\n  mainnet: {\n    public: \"wss://mainnet-ws.orderly.io\",\n    private: \"wss://mainnet-ws.orderly.io\",\n  },\n};\n","import { MessageHandler, SendFunc } from \"@/types/ws\";\nimport { WebSocketSubject } from \"rxjs/webSocket\";\n\nexport default class BaseHandler implements MessageHandler {\n  // constructor(readonly wsSubject: WebSocketSubject<any>) {}\n  handle(message: any, send: SendFunc) {\n    throw new Error(\"Method not implemented.\");\n  }\n}\n","import BaseHandler from \"./baseHandler\";\nimport { SendFunc } from \"@/types/ws\";\n\nexport default class PingHandler extends BaseHandler {\n  handle(_: any, send: SendFunc) {\n    send({ event: \"pong\", ts: Date.now() });\n  }\n}\n","import { MessageHandler } from \"@/types/ws\";\nimport PingHandler from \"./ping\";\n\nexport type MessageType =\n  | \"ping\"\n  | \"pong\"\n  | \"subscribe\"\n  | \"unsubscribe\"\n  | \"authenticate\"\n  | \"message\"\n  | \"error\"\n  | \"close\";\n\nexport const messageHandlers = new Map<MessageType, MessageHandler>([\n  [\"ping\", new PingHandler()],\n]);\n","export const __ORDERLY_API_URL_KEY__: string = \"__ORDERLY_API_URL__\";\n"],"mappings":"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","names":[]}